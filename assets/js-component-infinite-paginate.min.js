/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/scripts/helpers.js":
/*!********************************!*\
  !*** ./src/scripts/helpers.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "debounce": () => (/* binding */ debounce),
/* harmony export */   "getCollectionUrl": () => (/* binding */ getCollectionUrl),
/* harmony export */   "getShopifySection": () => (/* binding */ getShopifySection),
/* harmony export */   "isInViewport": () => (/* binding */ isInViewport),
/* harmony export */   "loadJS": () => (/* binding */ loadJS),
/* harmony export */   "parseTag": () => (/* binding */ parseTag),
/* harmony export */   "serializeForm": () => (/* binding */ serializeForm),
/* harmony export */   "toggleClassFromAttribute": () => (/* binding */ toggleClassFromAttribute)
/* harmony export */ });
const getShopifySection = ($element) => {
  const sectionPrefix = "shopify-section-";
  const $section = $element.closest(`[id^="${sectionPrefix}"]`);
  if (!$section) return [null, null];
  const sectionId = $section.id.replace(sectionPrefix, "");
  return [sectionId, $section];
};

const toggleClassFromAttribute = ($context, attributeName, on) => {
  $context.querySelectorAll(`[${attributeName}]`).forEach(($element) => {
    const className = $element.getAttribute(attributeName);
    if (className) {
      if (on) $element.classList.add(className);
      else $element.classList.remove(className);
    }
  });
};

const isInViewport = (elem) => {
  const bounding = elem && elem.getBoundingClientRect();
  return bounding && bounding.top < window.innerHeight && bounding.bottom >= 0;
};

function serializeForm(form) {
  let obj = {};
  let formData = new FormData(form);

  for (let key of formData.keys()) {
    obj[key] = formData.get(key);
  }

  return obj;
}

function debounce(fn, wait) {
  let t;
  return (...args) => {
    clearTimeout(t);
    t = setTimeout(() => fn.apply(this, args), wait);
  };
}

function parseTag(url) {
  const regex = /[^/]+$/;
  return url.match(regex)[0];
}

function getCollectionUrl(url) {
  const regex = /\/\S+\//;
  return url.match(regex)[0];
}

async function loadJS(FILE_URL, cb) {
  let $script = document.createElement("script");

  $script.setAttribute("src", FILE_URL);
  $script.setAttribute("type", "text/javascript");

  document.body.appendChild($script);

  cb && cb($script);
  return new Promise((resolve, reject) => {
    $script.addEventListener("load", () => {
      resolve(true);
    });
    $script.addEventListener("error", () => {
      reject(false);
    });
  });
}


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!*****************************************************!*\
  !*** ./src/scripts/components/infinite-paginate.js ***!
  \*****************************************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers */ "./src/scripts/helpers.js");


const ELEMENT_NAME = "infinite-paginate";
const LOAD_MORE_TYPE = "load-more";
const LOAD_PREV_TYPE = "load-prev";

const attributes = {
  content: `data-${ELEMENT_NAME}-content`,
  container: `data-${ELEMENT_NAME}-container`,
  loadingClass: `data-${ELEMENT_NAME}-loading-class`,
  loadingPrevClass: `data-${ELEMENT_NAME}-loading-prev-class`,
  loadingMoreClass: `data-${ELEMENT_NAME}-loading-more-class`,
  link: `data-${ELEMENT_NAME}-link`,
};

class InfinitePaginate extends HTMLElement {
  #isLoading = false;

  connectedCallback() {
    this.#addEventListeners();
  }

  #addEventListeners() {
    const loadMoreLinkQuery = `[${attributes.container}="${LOAD_MORE_TYPE}"] [${attributes.link}]`;
    const loadPrevLinkQuery = `[${attributes.container}="${LOAD_PREV_TYPE}"] [${attributes.link}]`;
    this.querySelectorAll(`${loadPrevLinkQuery}, ${loadMoreLinkQuery}`).forEach(
      ($link) => {
        const linkContainerType = $link
          .closest(`[${attributes.container}`)
          .getAttribute(attributes.container);
        $link.addEventListener("click", (event) => {
          event.preventDefault();
          this.#fetch($link.href, linkContainerType);
        });
      }
    );
  }

  #fetch(url, requestType) {
    if (this.#isLoading) return;
    const requestURL = new URL(url, window.location.origin);
    const [sectionId] = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.getShopifySection)(this);
    if (!sectionId)
      throw new Error(
        `[${ELEMENT_NAME}] [The component must be within a Shopify section]`
      );

    if (requestType === LOAD_MORE_TYPE) {
      window.history.pushState(
        Object.fromEntries(requestURL.searchParams),
        "",
        requestURL.href
      );
    }
    requestURL.search = requestURL.search + `&section_id=${sectionId}`;

    this.#isLoading = true;
    this.#addLoadingClasses(this.#isLoading, requestType);
    fetch(requestURL)
      .then((response) => response.text())
      .then((html) => {
        this.#render(html, requestType);
      })
      .finally(() => {
        this.#isLoading = false;
        this.#addLoadingClasses(this.#isLoading, requestType);
      });
  }

  #addLoadingClasses(on, requestType) {
    (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.toggleClassFromAttribute)(this, attributes.loadingClass, on);
    (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.toggleClassFromAttribute)(
      this,
      attributes.loadingPrevClass,
      on && requestType === LOAD_PREV_TYPE
    );
    (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.toggleClassFromAttribute)(
      this,
      attributes.loadingMoreClass,
      on && requestType === LOAD_MORE_TYPE
    );
  }

  #render(html, linkContainerType) {
    const receivedDOM = new DOMParser().parseFromString(html, "text/html");
    this.querySelectorAll(`[${attributes.container}]`).forEach(($container) => {
      const containerType = $container.getAttribute(attributes.container);
      if (!containerType)
        throw new Error(
          `[${ELEMENT_NAME}] [A "${attributes.container}" element doesn't have an attribute value]`
        );
      const $receivedContainer = receivedDOM.querySelector(
        `[${attributes.container}="${containerType}"]`
      );
      if (!$receivedContainer)
        throw new Error(
          `[${ELEMENT_NAME}] [Corresponding element for [${attributes.container}="${containerType}"] isn't received in the AJAX response]`
        );

      if (
        (linkContainerType === LOAD_MORE_TYPE &&
          containerType === LOAD_MORE_TYPE) ||
        (linkContainerType === LOAD_PREV_TYPE &&
          containerType === LOAD_PREV_TYPE)
      ) {
        $container.innerHTML = $receivedContainer.innerHTML;
      }
    });

    const $content = this.querySelector(`[${attributes.content}]`);
    const $receivedContent = receivedDOM.querySelector(
      `[${attributes.content}]`
    );
    if ($content && $receivedContent) {
      $content.insertAdjacentHTML(
        linkContainerType === LOAD_PREV_TYPE ? "afterbegin" : "beforeend",
        $receivedContent.innerHTML
      );
    } else {
      console.warn(
        `[${ELEMENT_NAME}] [The ${attributes.content} isn't found on the page or in the ajax response]`
      );
    }

    this.#addEventListeners();
  }
}

customElements.define(ELEMENT_NAME, InfinitePaginate);

})();

/******/ })()
;