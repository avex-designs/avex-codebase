(()=>{"use strict";class t extends HTMLElement{#t;#e="[[value]]";#i={undefined:"undefined",available:"available",not_available:"not-available",does_not_exist:"does-not-exist"};#a="js-product-option-";dataAttributes={};optionName;$productSection;constructor(t){super(),this.#t=t,this.dataAttributes={name:`data-${t}-name`,valueLabel:`data-${t}-value`,classPrefix:`data-${t}-class-prefix`}}connectedCallbackStart(){if(this.optionName=this.getAttribute(this.dataAttributes.name),void 0===this.optionName||""===this.optionName)throw new Error(`[${this.#t}] [Product option name is not set]`);if(this.$productSection=this.closest("product-section"),!this.$productSection)throw new Error(`[${this.#t}] [A related product-section element is not found]`);this.#a=this.getAttribute(this.dataAttributes.classPrefix)||this.#a}connectedCallbackEnd(){this.$productSection.addEventListener("statechange",(()=>{this.render()})),this.$productSection.state&&this.render()}getOptionState(){return this.$productSection.state.optionsValues.find((t=>t.name===this.optionName))}#s(t){const e=this.$productSection.state.optionsAvailability[this.optionName];let i=this.#i.undefined;return e&&(i=t in e?e[t]?this.#i.available:this.#i.not_available:this.#i.does_not_exist),i}addAvailabilityClass(t,e){t.classList.remove(...Object.values(this.#i).map((t=>this.#a+t))),t.classList.add(this.#a+this.#s(e))}render(){const t=this.getOptionState();if(t){const e=t.value;this.querySelectorAll(`[${this.dataAttributes.valueLabel}]`).forEach((t=>{if(!e)return void(t.innerHTML="");const i=t.getAttribute(this.dataAttributes.valueLabel)||this.#e;t.innerHTML=i.replaceAll(this.#e,e)}))}}}const e="product-select-option";customElements.define(e,class extends t{#l;constructor(){super(e)}connectedCallback(){if(super.connectedCallbackStart(),this.#l=this.querySelector("select"),!this.#l)throw new Error(`[${e}] [A select element if not found]`);super.connectedCallbackEnd(),this.#n()}#n(){this.#l.addEventListener("change",(t=>{this.$productSection.state&&this.$productSection.setOptions({[this.optionName]:t.currentTarget.value})}))}render(){super.render();const t=this.getOptionState();t&&(this.#l.value=t.value||"",this.#l.querySelectorAll("option").forEach((t=>{this.addAvailabilityClass(t,t.value)})))}})})();