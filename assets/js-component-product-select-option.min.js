(()=>{"use strict";class t extends HTMLElement{#elementName;#valueLabelPlaceholder="[[value]]";dataAttributes={};optionName;$productSection;constructor(t){super(),this.#elementName=t,this.dataAttributes={name:`data-${t}-name`,valueLabel:`data-${t}-value`,availabilityStatus:`data-${t}-availability`}}connectedCallbackStart(){if(this.optionName=this.getAttribute(this.dataAttributes.name),void 0===this.optionName||""===this.optionName)throw new Error(`[${this.#elementName}] [Product option name is not set]`);if(this.$productSection=this.closest("product-section"),!this.$productSection)throw new Error(`[${this.#elementName}] [A related product-section element is not found]`)}connectedCallbackEnd(){this.$productSection.addEventListener("statechange",(()=>{this.render()})),this.$productSection.state&&this.render()}getOptionState(){return this.$productSection.state.optionsValues.find((t=>t.name===this.optionName))}getValueAvailability(t){const e="undefined",i="available",a="not-available",s="does-not-exist",n=this.$productSection.state.optionsAvailability[this.optionName];console.log(n);let o=e;return n&&(o=t in n?n[t]?i:a:s),o}render(){const t=this.getOptionState();if(t){const e=t.value;this.querySelectorAll(`[${this.dataAttributes.valueLabel}]`).forEach((t=>{if(!e)return void(t.innerHTML="");const i=t.getAttribute(this.dataAttributes.valueLabel)||this.#valueLabelPlaceholder;t.innerHTML=i.replaceAll(this.#valueLabelPlaceholder,e)}))}}}const e="product-select-option";customElements.define(e,class extends t{#$select;constructor(){super(e)}connectedCallback(){if(super.connectedCallbackStart(),this.#$select=this.querySelector("select"),!this.#$select)throw new Error(`[${e}] [A select element if not found]`);super.connectedCallbackEnd(),this.#internalEvents()}#internalEvents(){this.#$select.addEventListener("change",(t=>{this.$productSection.state&&this.$productSection.setOptions({[this.optionName]:t.currentTarget.value})}))}render(){super.render();const t=this.getOptionState();t&&(this.#$select.value=t.value||"",this.#$select.querySelectorAll("option").forEach((t=>{t.setAttribute(this.dataAttributes.availabilityStatus,this.getValueAvailability(t.value))})))}})})();