(()=>{"use strict";class t extends HTMLElement{_elementName;_valueLabelPlaceholder="[[value]]";_availabilityStatuses={undefined:"undefined",available:"available",not_available:"not-available",does_not_exist:"does-not-exist"};_classPrefix="js-product-option-";dataAttributes={};optionName;$productSection;constructor(t){super(),this._elementName=t,this.dataAttributes={name:`data-${t}-name`,valueLabel:`data-${t}-value`,classPrefix:`data-${t}-class-prefix`}}connectedCallbackStart(){if(this.optionName=this.getAttribute(this.dataAttributes.name),void 0===this.optionName||""===this.optionName)throw new Error(`[${this._elementName}] [Product option name is not set]`);if(this.$productSection=this.closest("product-section"),!this.$productSection)throw new Error(`[${this._elementName}] [A related product-section element is not found]`);this._classPrefix=this.getAttribute(this.dataAttributes.classPrefix)||this._classPrefix}connectedCallbackEnd(){this.$productSection.addEventListener("statechange",(()=>{this.render()})),this.$productSection.state&&this.render()}getOptionState(){return this.$productSection.state.optionsValues.find((t=>t.name===this.optionName))}_getValueAvailability(t){const e=this.$productSection.state.optionsAvailability[this.optionName];let i=this._availabilityStatuses.undefined;return e&&(i=t in e?e[t]?this._availabilityStatuses.available:this._availabilityStatuses.not_available:this._availabilityStatuses.does_not_exist),i}addAvailabilityClass(t,e){t.classList.remove(...Object.values(this._availabilityStatuses).map((t=>this._classPrefix+t))),t.classList.add(this._classPrefix+this._getValueAvailability(e))}render(){const t=this.getOptionState();if(t){const e=t.value;this.querySelectorAll(`[${this.dataAttributes.valueLabel}]`).forEach((t=>{if(!e)return void(t.innerHTML="");const i=t.getAttribute(this.dataAttributes.valueLabel)||this._valueLabelPlaceholder;t.innerHTML=i.replaceAll(this._valueLabelPlaceholder,e)}))}}}const e="product-select-option";customElements.define(e,class extends t{_$select;constructor(){super(e)}connectedCallback(){if(super.connectedCallbackStart(),this._$select=this.querySelector("select"),!this._$select)throw new Error(`[${e}] [A select element if not found]`);super.connectedCallbackEnd(),this._internalEvents()}_internalEvents(){this._$select.addEventListener("change",(t=>{this.$productSection.state&&this.$productSection.setOptions({[this.optionName]:t.currentTarget.value})}))}render(){super.render();const t=this.getOptionState();t&&(this._$select.value=t.value||"",this._$select.querySelectorAll("option").forEach((t=>{this.addAvailabilityClass(t,t.value)})))}})})();