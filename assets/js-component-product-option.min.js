(()=>{const t="data-product-option-availability",e="undefined",o="available",i="not-available",n="does-not-exist";class s extends HTMLElement{#$productSection;#optionName;constructor(){super()}connectedCallback(){if(this.#optionName=this.dataset.productOptionName,void 0===this.#optionName||""===this.#optionName)throw new Error("Product option name is not set");if(this.#$productSection=this.closest("product-section"),!this.#$productSection)throw new Error("A related product-section element is not found");this.#$productSection.addEventListener("statechange",(()=>{this.#render()})),this.#$productSection.state&&this.#render(),this.#internalEvents()}#internalEvents(){this.querySelectorAll("input[type='radio']").forEach((t=>{t.addEventListener("change",(t=>{this.#$productSection.state&&this.#$productSection.setOptions({[this.#optionName]:t.currentTarget.value})}))}))}#render(){const s=this.#$productSection.state,a=s.optionsValues.find((t=>t.name===this.#optionName)),r=s.optionsAvailability[this.#optionName];if(a){const s=a.value;this.querySelectorAll("input[type='radio']").forEach((a=>{a.value===s?a.checked=!0:a.checked=!1;let c=e;r&&(c=a.value in r?r[a.value]?o:i:n),a.setAttribute(t,c)}))}}}customElements.define("product-option",s)})();