(()=>{class t extends HTMLElement{constructor(){super();const t=this.querySelector("form");if(!t)throw new Error("[SmartForm] Form not found");this.$form=t,this.$allFields=Array.from(t.querySelectorAll("input, textarea, select")),this.$submitButton=Array.from(t.querySelectorAll("[type='submit']")),this.setFieldListeners(),this.setSubmitListener()}setSubmitListener(){const t=this;this.$form.addEventListener("submit",(e=>{e.preventDefault();t._setFormValidationRules()?e.currentTarget.submit():t.$allFields.forEach((t=>this._setFieldValidationRules(t)))}))}setFieldListeners(){this.$allFields&&this.$allFields.length&&this.$allFields.forEach((t=>{["blur","change","input"].forEach((e=>{t.addEventListener(e,(()=>{this._setFormValidationRules(),this._setFieldValidationRules(t)}))}))}))}_setFieldValidationRules(t){t.setAttribute("aria-invalid",!t.checkValidity()),this._validateFormPasswords(!0)}_setFormValidationRules(){let t=1;return t*=this._validateFormHTML(),t*=this._validateFormPasswords(),this.$form.setAttribute("data-invalid",0===t),1===t}_validateFormHTML(){return this.$allFields.some((t=>!t.checkValidity()))?0:1}_validateFormPasswords(t=!1){let e=!1;const s=this.$form.querySelector("input[name='customer[password_confirmation]']");if(s&&""!==s.value){e=this.$form.querySelector("input[name='customer[password]']").value!==s.value,e&&t&&s.setAttribute("aria-invalid",!0)}return e?0:1}}customElements.define("smart-form",t)})();