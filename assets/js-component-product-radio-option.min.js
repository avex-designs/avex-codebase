(()=>{const t="data-product-radio-option-name",e="data-product-radio-option-availability",o="undefined",i="available",n="not-available",a="does-not-exist";class s extends HTMLElement{#$productSection;#optionName;constructor(){super()}connectedCallback(){if(this.#optionName=this.getAttribute(t),void 0===this.#optionName||""===this.#optionName)throw new Error("Product option name is not set");if(this.#$productSection=this.closest("product-section"),!this.#$productSection)throw new Error("A related product-section element is not found");this.#$productSection.addEventListener("statechange",(()=>{this.#render()})),this.#$productSection.state&&this.#render(),this.#internalEvents()}#internalEvents(){this.querySelectorAll("input[type='radio']").forEach((t=>{t.addEventListener("change",(t=>{this.#$productSection.state&&this.#$productSection.setOptions({[this.#optionName]:t.currentTarget.value})}))}))}#render(){const t=this.#$productSection.state,s=t.optionsValues.find((t=>t.name===this.#optionName)),r=t.optionsAvailability[this.#optionName];if(s){const t=s.value;this.querySelectorAll("input[type='radio']").forEach((s=>{s.value===t?s.checked=!0:s.checked=!1;let c=o;r&&(c=s.value in r?r[s.value]?i:n:a),s.setAttribute(e,c)}))}}}customElements.define("product-radio-option",s)})();