/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/scripts/helpers.js":
/*!********************************!*\
  !*** ./src/scripts/helpers.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ProductOption": () => (/* binding */ ProductOption),
/* harmony export */   "debounce": () => (/* binding */ debounce),
/* harmony export */   "getCollectionUrl": () => (/* binding */ getCollectionUrl),
/* harmony export */   "getShopifySection": () => (/* binding */ getShopifySection),
/* harmony export */   "isInViewport": () => (/* binding */ isInViewport),
/* harmony export */   "loadJS": () => (/* binding */ loadJS),
/* harmony export */   "parseTag": () => (/* binding */ parseTag),
/* harmony export */   "serializeForm": () => (/* binding */ serializeForm),
/* harmony export */   "toggleClassFromAttribute": () => (/* binding */ toggleClassFromAttribute)
/* harmony export */ });
const getShopifySection = ($element) => {
  const sectionPrefix = "shopify-section-";
  const $section = $element.closest(`[id^="${sectionPrefix}"]`);
  if (!$section) return [null, null];
  const sectionId = $section.id.replace(sectionPrefix, "");
  return [sectionId, $section];
};

const toggleClassFromAttribute = ($context, attributeName, on) => {
  $context.querySelectorAll(`[${attributeName}]`).forEach(($element) => {
    const className = $element.getAttribute(attributeName);
    if (className) {
      if (on) $element.classList.add(className);
      else $element.classList.remove(className);
    }
  });
};

const isInViewport = (elem) => {
  const bounding = elem && elem.getBoundingClientRect();
  return bounding && bounding.top < window.innerHeight && bounding.bottom >= 0;
};

function serializeForm(form) {
  let obj = {};
  let formData = new FormData(form);

  for (let key of formData.keys()) {
    obj[key] = formData.get(key);
  }

  return obj;
}

function debounce(fn, wait) {
  let t;
  return (...args) => {
    clearTimeout(t);
    t = setTimeout(() => fn.apply(this, args), wait);
  };
}

function parseTag(url) {
  const regex = /[^/]+$/;
  return url.match(regex)[0];
}

function getCollectionUrl(url) {
  const regex = /\/\S+\//;
  return url.match(regex)[0];
}

async function loadJS(FILE_URL, cb) {
  let $script = document.createElement("script");

  $script.setAttribute("src", FILE_URL);
  $script.setAttribute("type", "text/javascript");

  document.body.appendChild($script);

  cb && cb($script);
  return new Promise((resolve, reject) => {
    $script.addEventListener("load", () => {
      resolve(true);
    });
    $script.addEventListener("error", () => {
      reject(false);
    });
  });
}

class ProductOption extends HTMLElement {
  #elementName;
  #valueLabelPlaceholder = "[[value]]";
  #availabilityStatuses = {
    undefined: "undefined",
    available: "available",
    not_available: "not-available",
    does_not_exist: "does-not-exist",
  };
  #classPrefix = "js-product-option-";

  dataAttributes = {};
  optionName;
  $productSection;

  constructor(elementName) {
    super();
    this.#elementName = elementName;
    this.dataAttributes = {
      name: `data-${elementName}-name`,
      valueLabel: `data-${elementName}-value`,
      classPrefix: `data-${elementName}-class-prefix`,
    };
  }

  connectedCallbackStart() {
    this.optionName = this.getAttribute(this.dataAttributes.name);
    if (this.optionName === undefined || this.optionName === "")
      throw new Error(
        `[${this.#elementName}] [Product option name is not set]`
      );

    this.$productSection = this.closest("product-section");
    if (!this.$productSection)
      throw new Error(
        `[${
          this.#elementName
        }] [A related product-section element is not found]`
      );

    this.#classPrefix =
      this.getAttribute(this.dataAttributes.classPrefix) || this.#classPrefix;
  }

  connectedCallbackEnd() {
    this.$productSection.addEventListener("statechange", () => {
      this.render();
    });
    if (this.$productSection.state) this.render();
  }

  getOptionState() {
    return this.$productSection.state.optionsValues.find(
      (option) => option.name === this.optionName
    );
  }

  #getValueAvailability(value) {
    const availability =
      this.$productSection.state.optionsAvailability[this.optionName];
    let status = this.#availabilityStatuses.undefined;
    if (availability) {
      if (!(value in availability))
        status = this.#availabilityStatuses.does_not_exist;
      else if (availability[value])
        status = this.#availabilityStatuses.available;
      else status = this.#availabilityStatuses.not_available;
    }
    return status;
  }

  addAvailabilityClass($element, value) {
    $element.classList.remove(
      ...Object.values(this.#availabilityStatuses).map(
        (status) => this.#classPrefix + status
      )
    );
    $element.classList.add(
      this.#classPrefix + this.#getValueAvailability(value)
    );
  }

  render() {
    const option = this.getOptionState();
    if (option) {
      const value = option.value;
      this.querySelectorAll(`[${this.dataAttributes.valueLabel}]`).forEach(
        ($element) => {
          if (!value) {
            $element.innerHTML = "";
            return;
          }
          const template =
            $element.getAttribute(this.dataAttributes.valueLabel) ||
            this.#valueLabelPlaceholder;
          $element.innerHTML = template.replaceAll(
            this.#valueLabelPlaceholder,
            value
          );
        }
      );
    }
  }
}


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!***********************************************!*\
  !*** ./src/scripts/components/facets-form.js ***!
  \***********************************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers */ "./src/scripts/helpers.js");
// ====== Draft DOCS ========

// The "form" attribute is supported for form components:
// If you want to put an "input" or "select" element outside the component --
// add an id to the form and the "form" attribute to the element



const ELEMENT_NAME = "facets-form";

const attributes = {
  ajaxInput: `data-${ELEMENT_NAME}-input`,
  content: `data-${ELEMENT_NAME}-content`,
  link: `data-${ELEMENT_NAME}-link`,
};

let responseCache = []; // [{url, html}, {url, html}]
let searchParamsInitial = window.location.search.slice(1);
let searchParamsPrev = window.location.search.slice(1);
let abortController;

window.addEventListener("popstate", (event) => {
  const searchParams = event.state
    ? event.state.searchParams
    : searchParamsInitial;
  if (searchParams === searchParamsPrev) return;
  facetsChangeHandler(searchParams, false);
});

document.addEventListener("click", (event) => {
  const $link = event.target.closest(`[${attributes.link}]`);
  if (!$link) return;
  const url = $link.href;
  if (!url) return;
  facetsChangeHandler(new URL(url).searchParams.toString());
  event.preventDefault();
});

function facetsChangeHandler(searchParams, updateURLHash = true) {
  try {
    if (abortController) {
      abortController.abort();
      abortController = undefined;
    }
    searchParamsPrev = searchParams;
    const sectionsMap = {};
    document.querySelectorAll(`[${attributes.content}]`).forEach(($content) => {
      const [sectionId] = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.getShopifySection)($content);
      if (!sectionId)
        throw new Error(
          `[${ELEMENT_NAME}] [The "${attributes.content}" element must be within a Shopify section]`
        );
      sectionsMap[sectionId] = true;
    });

    const sections = Object.keys(sectionsMap);
    if (sections.length > 5) {
      throw new Error(
        `[${ELEMENT_NAME}] [The "${attributes.content}" elements exist in more than 5 sections]`
      );
    }

    const url = `${window.location.pathname}?sections=${sections.join(
      ","
    )}&${searchParams}`;

    const cachedResponse = responseCache.find((item) => item.url === url);
    if (cachedResponse) renderPage(cachedResponse.html);
    else {
      abortController = new AbortController();
      toggleLoadingClasses(true);
      disableTextInputs(true);
      fetch(url, { signal: abortController.signal })
        .then((response) => response.json())
        .then((data) => {
          let html = "";
          for (let i in data) {
            html += data[i];
          }
          responseCache.push({ url, html });
          renderPage(html);
        })
        .catch((error) => {
          if (error.name !== "AbortError") {
            console.error(
              `[${ELEMENT_NAME}] [Section API request error]`,
              error
            );
            window.location.href = `?${searchParams}`;
          }
        })
        .finally(() => {
          disableTextInputs(false);
          toggleLoadingClasses(false);
        });
    }

    if (updateURLHash)
      history.pushState(
        { searchParams },
        "",
        `${window.location.pathname}${searchParams && "?".concat(searchParams)}`
      );
  } catch (e) {
    console.error(e);
    window.location.href = `?${searchParams}`;
  }
}

function disableTextInputs(disable) {
  document
    .querySelectorAll(
      `[${attributes.ajaxInput}][type="number"], [${attributes.ajaxInput}][type="text"]`
    )
    .forEach(($input) => {
      $input.readOnly = disable;
    });
}

function toggleLoadingClasses(on) {
  (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.toggleClassFromAttribute)(document, attributes.loadingClass, on);
}

function renderPage(html) {
  const $receivedDocument = new DOMParser().parseFromString(html, "text/html");
  document.querySelectorAll(`[${attributes.content}]`).forEach(($content) => {
    const contentId = $content.getAttribute(attributes.content);
    if (!contentId)
      throw new Error(
        `[${ELEMENT_NAME}] [A "${attributes.content}" element doesn't have unique value]`
      );
    const $receivedContent = $receivedDocument.querySelector(
      `[${attributes.content}="${contentId}"]`
    );
    if (!$receivedContent) {
      throw new Error(
        `[${ELEMENT_NAME}] [A "${attributes.content}" element with "${contentId}" value isn't found in the section API response]`
      );
    }
    $content.innerHTML = $receivedContent.innerHTML;
  });
}

class FacetsForm extends HTMLElement {
  #$form;
  connectedCallback() {
    this.#$form = this.querySelector("form");
    if (!this.#$form)
      throw new Error(`[${ELEMENT_NAME}] [The "form" element isn't found]`);

    this.#$form.addEventListener("submit", (event) => {
      event.preventDefault();
      this.#ajaxSubmit();
    });

    document.body.addEventListener("change", (event) => {
      if (
        event.target.form === this.#$form &&
        event.target.hasAttribute(attributes.ajaxInput)
      ) {
        this.#ajaxSubmit();
      }
    });
  }

  #ajaxSubmit() {
    const formData = new FormData(this.#$form);
    facetsChangeHandler(new URLSearchParams(formData).toString());
  }
}

customElements.define(ELEMENT_NAME, FacetsForm);

})();

/******/ })()
;