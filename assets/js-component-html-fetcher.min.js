(()=>{const t="html-fetcher",e={EAGER:"eager",LAZY:"lazy"};class r extends HTMLElement{#url;#abortController;#loading=e.EAGER;#intersectionObserver;constructor(){super(),this.#intersectionObserver=new IntersectionObserver(((t,e)=>{t[0].isIntersecting&&(e.unobserve(this),this.updateHTML())}),{rootMargin:"0px 0px 0px 0px"})}connectedCallback(){const t=this.getAttribute("loading");Object.values(e).includes(t)&&(this.#loading=t);const r=this.getAttribute("href");r&&this.setUrl(r)}setUrl(t){this.#url=t,this.#loading!==e.EAGER?this.#intersectionObserver.observe(this):this.updateHTML()}async updateHTML(){this.#abortController&&this.#abortController.abort(),this.#abortController=new AbortController;try{const e=await fetch(this.#url,{signal:this.#abortController.signal});if(!e.ok)throw new Error(`Response error from the "${e.url}" URL`);const r=await e.text(),s=(new DOMParser).parseFromString(r,"text/html").querySelector(t);this.innerHTML=s?s.innerHTML:r}catch(t){if("AbortError"!==t.name)throw t}}}customElements.define(t,r)})();